package net.goldenstack.loot;

import org.jetbrains.annotations.NotNull;

import java.util.Random;

/**
 * Generates numbers based on provided loot contexts.
 */
public interface LootNumber {

    /**
     * Generates an integer depending on the information in the provided context.<br>
     * This is an explicitly impure method—it depends on state outside the given context.
     * @param context the context object, to use if required
     * @return the integer generated by this loot number for the provided context
     */
    int getInt(@NotNull LootContext context);

    /**
     * Generates a double depending on the information in the provided context.<br>
     * This is an explicitly impure method—it depends on state outside the given context.
     * @param context the context object, to use if required
     * @return the double generated by this loot number for the provided context
     */
    double getDouble(@NotNull LootContext context);

    record Constant(@NotNull Number value) implements LootNumber {
        @Override
        public int getInt(@NotNull LootContext context) {
            return value.intValue();
        }

        @Override
        public double getDouble(@NotNull LootContext context) {
            return value.doubleValue();
        }
    }

    record Uniform(@NotNull LootNumber min, @NotNull LootNumber max) implements LootNumber {
        @Override
        public int getInt(@NotNull LootContext context) {
            return context.require(LootContext.RANDOM).nextInt(min().getInt(context), max().getInt(context) + 1);
        }

        @Override
        public double getDouble(@NotNull LootContext context) {
            return context.require(LootContext.RANDOM).nextDouble(min().getDouble(context), max().getDouble(context));
        }
    }

    record Binomial(@NotNull LootNumber trials, @NotNull LootNumber probability) implements LootNumber {
        @Override
        public int getInt(@NotNull LootContext context) {
            int trials = trials().getInt(context);
            double probability = probability().getDouble(context);
            Random random = context.require(LootContext.RANDOM);

            int successes = 0;
            for (int trial = 0; trial < trials; trial++) {
                if (random.nextDouble() < probability) {
                    successes++;
                }
            }
            return successes;
        }

        @Override
        public double getDouble(@NotNull LootContext context) {
            return getInt(context);
        }
    }

}
